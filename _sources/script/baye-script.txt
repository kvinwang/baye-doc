.. highlight:: javascript

霸业脚本系统原理
----------------

霸业的脚本系统定义了一个对象 ``baye.hooks`` ，称之为 ``钩子对象`` ，此对象作为引擎与脚本衔接的纽带。
引擎在一系列特定的时间点会调用 ``baye.hooks`` 里面的 ``钩子函数`` 来完成特定任务。

当lib开启了脚本功能后，引擎在启动时会执行 ``script.js`` 文件内的代码。因此， ``script.js`` 文件的主要作用就是往 ``baye.hooks`` 对象里面填充我们需要关注的 ``钩子函数`` 来实现特定功能。

示例::

    baye.hooks.giveTool = function(context) {
        //简单示例，赏赐成功
        context.result = 1;
    }

如上，每当引擎执行到赏赐功能的时候会调用 ``baye.hooks.giveTool`` 这个钩子函数，达到" **询问** 脚本是否要允许赏赐“这个目的。


霸业脚本编写向导
----------------

了解了原理后，我们就可以一步一步来编写霸业脚本了。

假如我们要实现这么一个功能: **每月对AI控制的人物执行升级**

为实现此功能，我们需要在写一些功能代码，并且让引擎在每次策略结束后执行我们的代码。

**Step1: 让引擎每次策略结束后执行我们的代码**

我们设置钩子函数 ``baye.hooks.tacticStage4`` (详细介绍参考下文 :ref:`hooks` )

::

    baye.hooks.tacticStage4 = function() {
        //待续
    };


**Step2: 遍历所有人物，如果有归属，且归属不是玩家君主, 且等级未满上限，升级之**::

    baye.hooks.tacticStage4 = function() {
        var allPerson = baye.data.g_Persons;
        var playerKingId = baye.data.g_PlayerKing + 1;
        var maxLevel = baye.data.g_engineConfig.maxLevel;

        for (var i = 0; i < allPerson.length; i++) {
            var p = allPerson[i];
            if (p.Belong > 0 && p.Belong != playerKingId && p.Level < maxLevel) {
                p.Level = p.Level + 1;
            }
        }
    };

注：

#. 关于 ``baye.data`` 内的数据参考后文 :ref:`datas`
#. ``allPerson[i]`` : 取列表里第 ``i`` 个元素（也就是第i个人物的数据）
#. ``&&`` : 并且
#. ``!=`` : 不等于

**Step3: 进一步完善**

当人物处于被俘虏状态时，归属被设置为255，因此进一步排除俘虏被升级::

    baye.hooks.tacticStage4 = function() {
        var allPerson = baye.data.g_Persons;
        var playerKingId = baye.data.g_PlayerKing + 1;
        var maxLevel = baye.data.g_engineConfig.maxLevel;

        for (var i = 0; i < allPerson.length; i++) {
            var p = allPerson[i];
            if (
                p.Belong > 0
                && p.Belong != playerKingId
                && p.Belong != 255
                && p.Level < maxLevel
            ) {
                p.Level = p.Level + 1;
            }
        }
    };

**Step4: 加入概率因素**::

    baye.hooks.tacticStage4 = function() {
        var allPerson = baye.data.g_Persons;
        var playerKingId = baye.data.g_PlayerKing + 1;
        var maxLevel = baye.data.g_engineConfig.maxLevel;

        for (var i = 0; i < allPerson.length; i++) {
            var p = allPerson[i];
            if (
                p.Belong > 0
                && p.Belong != playerKingId
                && p.Belong != 255
                && p.Level < maxLevel
            ) {
                var chance = Math.random(); //产生一个0~1之间的随机数
                if (chance < 0.7) {// 随机数小于0.7升级，也就是70%的概率升级
                    p.Level = p.Level + 1;
                }
            }
        }
    };


